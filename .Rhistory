odd_cases <- data.frame(
N_v832_manual = c(3679, 3687,  3798,  3933,  4270, 4276, 4299,  4452, 4479,  4567, 4720,  4730,  4775,  4814,  5081,  5203, 5231, 5463, 5794,
5799, 5895,  5955, 5963, 5992,  6000,   6073, 6074, 6079,  6130, 6139,  6201, 6324,  6366,  6414,  6419,  6461,  6468,
6551,  6554,  6567,  6586,  6588, 6590,  6609,  6611, 6694,  6698,  6723,  6727,  6729,  6751,  6761,  6762,  6763, 6764,
6770,  6772,  6816,  6866, 6894, 7010, 7031, 7090,  7095,  7111, 7135, 7137, 7179,  7197,  7354, 7458, 7459, 7466, 7600,
7608, 7777,  7891, 7904, 8011, 8088, 8203, 8224, 8260,  8286, 8311, 8357,  8394,  8429,  8550,  8551,  8586,  8606,  8607,
8632, 8656,  8658,  8727,  8748,  8840,  8843, 8870,  8874,  8876,  9010, 9279, 9523, 9524, 9525, 9526, 9527, 9535, 9547,
9549,  9552, 9581,  9589,  9608, 9628, 9656,  9670, 9949,  10778, 10896, 10992, 11057, 11289, 11727, 12033, 12156, 12225,
12245, 12257, 13114, 13157, 20148, 20465, 20843, 20941, 21856, 22013, 22015, 22322, 22442, 22571, 22665, 22666, 23234,
23351, 23544, 23736, 23745, 24008, 24276, 25158, 25159,  25160,  26037, 26711, 26774, 26775, 30308, 30834, 30847, 30874,
30975, 31666, 31670),
N =   c(1046, 36094, 35970, 34967, 0,    0,    36358, 0   , 34754, 0,    34479, 34494, 32153, 33489, 33734, 0,    0,    0,    0,
0,    31618, 0,    0,    38391,  38374, 0,    0,    38548, 0,    38413, 0,    39383, 37823, 36978, 37260, 37939, 36783,
37595, 38439, 39145, 39245, 0,    38019, 38090, 0,    38628, 38299, 38242, 38695, 38294, 38698, 38338, 38373, 0,    38687,
38780, 38509, 38807, 0,    0,    0,    0,    39155, 39190, 0,    0,    0,    38253, 39196, 0,    0,    0,    0,    0,
0,    38334, 0,    0,    0,    0,    0,    0,    39053, 0,    0,    38481, 39106, 37748, 38249, 38114, 37872, 38405, 37993,
0,    38007, 37915, 37934, 39207, 38778, 0,    39184, 39165, 0,    0,    0,    0,    0,    0,     0,    0,    38853, 38891,
38859, 38836, 38601, 38645, 0,    37550,    37330, 0,    33761, 38895, 38919, 0,     0,     0,     0,     0,     0,     36784,
34816, 0,     0,     0,     0,     0,     75029, 0,     0,     79654, 81596, 0,     0,     77923, 77945, 81593, 81522,
81000, 75028, 75776, 0,     79652, 81001, 0,     165005, 103616, 0,     0,     0,    0,     0,     0,     0,     0,
0, 25030, 0)
) %>%
mutate(description = ifelse(N == 0, "Node Not in v9",NA))
descrip <- v9_v832_nodes %>%
left_join(moved_nodes_good_guess, by = c("N_v832_guess" = "N_v832_correct")) %>%
left_join(odd_cases, by = c("N")) %>%
mutate(description = case_when(
!is.na(description) ~ description,
!is.na(N_v832_correct) ~ "GEOGKEY matches",
N < 2890 ~ "Moved Centroid Node",
!is.na(N_v832_manual) ~ "Moved Node, Bad Guess",
!is.na(moved_node) ~ "Moved Node, Good Guess"
)) %>%
mutate(N_v832_correct = ifelse(description == "GEOGKEY matches", N_v832_correct,
ifelse(description == "Moved Centroid Node", N_v832_guess,
ifelse(description == "Moved Node, Bad Guess", N_v832_manual,
ifelse(description == "Moved Node, Good Guess", moved_node, N_v832_correct))))
)
# there are 167 cases where a node exists in v832 but needs manual inspection to determine v9 node
odd_cases <- data.frame(
N_v832_manual = c(3679, 3687,  3798,  3933,  4270, 4276, 4299,  4452, 4479,  4567, 4720,  4730,  4775,  4814,  5081,  5203, 5231, 5463, 5794,
5799, 5895,  5955, 5963, 5992,  6000,   6073, 6074, 6079,  6130, 6139,  6201, 6324,  6366,  6414,  6419,  6461,  6468,
6551,  6554,  6567,  6586,  6588, 6590,  6609,  6611, 6694,  6698,  6723,  6727,  6729,  6751,  6761,  6762,  6763, 6764,
6770,  6772,  6816,  6866, 6894, 7010, 7031, 7090,  7095,  7111, 7135, 7137, 7179,  7197,  7354, 7458, 7459, 7466, 7600,
7608, 7777,  7891, 7904, 8011, 8088, 8203, 8224, 8260,  8286, 8311, 8357,  8394,  8429,  8550,  8551,  8586,  8606,  8607,
8632, 8656,  8658,  8727,  8748,  8840,  8843, 8870,  8874,  8876,  9010, 9279, 9523, 9524, 9525, 9526, 9527, 9535, 9547,
9549,  9552, 9581,  9589,  9608, 9628, 9656,  9670, 9949,  10778, 10896, 10992, 11057, 11289, 11727, 12033, 12156, 12225,
12245, 12257, 13114, 13157, 20148, 20465, 20843, 20941, 21856, 22013, 22015, 22322, 22442, 22571, 22665, 22666, 23234,
23351, 23544, 23736, 23745, 24008, 24276, 25158, 25159,  25160,  26037, 26711, 26774, 26775, 30308, 30834, 30847, 30874,
30975, 31666, 31670),
N =   c(1046, 36094, 35970, 34967, 0,    0,    36358, 0   , 34754, 0,    34479, 34494, 32153, 33489, 33734, 0,    0,    0,    0,
0,    31618, 0,    0,    38391,  38374, 0,    0,    38548, 0,    38413, 0,    39383, 37823, 36978, 37260, 37939, 36783,
37595, 38439, 39145, 39245, 0,    38019, 38090, 0,    38628, 38299, 38242, 38695, 38294, 38698, 38338, 38373, 0,    38687,
38780, 38509, 38807, 0,    0,    0,    0,    39155, 39190, 0,    0,    0,    38253, 39196, 0,    0,    0,    0,    0,
0,    38334, 0,    0,    0,    0,    0,    0,    39053, 0,    0,    38481, 39106, 37748, 38249, 38114, 37872, 38405, 37993,
0,    38007, 37915, 37934, 39207, 38778, 0,    39184, 39165, 0,    0,    0,    0,    0,    0,     0,    0,    38853, 38891,
38859, 38836, 38601, 38645, 0,    37550,    37330, 0,    33761, 38895, 38919, 0,     0,     0,     0,     0,     0,     36784,
34816, 0,     0,     0,     0,     0,     75029, 0,     0,     79654, 81596, 0,     0,     77923, 77945, 81593, 81522,
81000, 75028, 75776, 0,     79652, 81001, 0,     165005, 103616, 0,     0,     0,    0,     0,     0,     0,     0,
0, 25030, 0)
) %>%
mutate(description = ifelse(N == 0, "Node Not in v9",NA))
descrip <- v9_v832_nodes %>%
left_join(moved_nodes_good_guess, by = c("N_v832_guess" = "N_v832_correct")) %>%
left_join(odd_cases, by = c("N")) %>%
mutate(description = case_when(
!is.na(description) ~ description,
!is.na(N_v832_correct) ~ "GEOGKEY matches",
N < 2890 ~ "Moved Centroid Node",
!is.na(N_v832_manual) ~ "Moved Node, Bad Guess",
!is.na(moved_node) ~ "Moved Node, Good Guess"
)) %>%
mutate(N_v832_correct = ifelse(description == "GEOGKEY matches", N_v832_correct,
ifelse(description == "Moved Centroid Node", N_v832_guess,
ifelse(description == "Moved Node, Bad Guess", N_v832_manual,
ifelse(description == "Moved Node, Good Guess", moved_node, N_v832_correct))))
)
Forgotten_Nodes <- odd_nodes %>% filter(N ==0)
Forgotten_Nodes <- odd_cases %>% filter(N ==0)
View(Forgotten_Nodes)
View(Forgotten_Nodes)
# there are 167 cases where a node exists in v832 but needs manual inspection to determine v9 node
odd_cases <- data.frame(
N_v832_manual = c(3679, 3687,  3798,  3933,  4270, 4276, 4299,  4452, 4479,  4567, 4720,  4730,  4775,  4814,  5081,  5203, 5231, 5463, 5794,
5799, 5895,  5955, 5963, 5992,  6000,   6073, 6074, 6079,  6130, 6139,  6201, 6324,  6366,  6414,  6419,  6461,  6468,
6551,  6554,  6567,  6586,  6588, 6590,  6609,  6611, 6694,  6698,  6723,  6727,  6729,  6751,  6761,  6762,  6763, 6764,
6770,  6772,  6816,  6866, 6894, 7010, 7031, 7090,  7095,  7111, 7135, 7137, 7179,  7197,  7354, 7458, 7459, 7466, 7600,
7608, 7777,  7891, 7904, 8011, 8088, 8203, 8224, 8260,  8286, 8311, 8357,  8394,  8429,  8550,  8551,  8586,  8606,  8607,
8632, 8656,  8658,  8727,  8748,  8840,  8843, 8870,  8874,  8876,  9010, 9279, 9523, 9524, 9525, 9526, 9527, 9535, 9547,
9549,  9552, 9581,  9589,  9608, 9628, 9656,  9670, 9949,  10778, 10896, 10992, 11057, 11289, 11727, 12033, 12156, 12225,
12245, 12257, 13114, 13157, 20148, 20465, 20843, 20941, 21856, 22013, 22015, 22322, 22442, 22571, 22665, 22666, 23234,
23351, 23544, 23736, 23745, 24008, 24276, 25158, 25159,  25160,  26037, 26711, 26774, 26775, 30308, 30834, 30847, 30874,
30975, 31666, 31670),
N =             c(1046, 36094, 35970, 34967, 0,    0,    36358, 0   , 34754, 0,    34479, 34494, 32153, 33489, 33734, 102116,    0,    0,    0,
0,    31618, 0,    0,    38391,  38374, 0,    0,    38548, 0,    38413, 0,    39383, 37823, 36978, 37260, 37939, 36783,
37595, 38439, 39145, 39245, 0,    38019, 38090, 0,    38628, 38299, 38242, 38695, 38294, 38698, 38338, 38373, 0,    38687,
38780, 38509, 38807, 0,    0,    0,    0,    39155, 39190, 0,    0,    0,    38253, 39196, 0,    0,    0,    0,    0,
0,    38334, 0,    0,    0,    0,    0,    0,    39053, 0,    0,    38481, 39106, 37748, 38249, 38114, 37872, 38405, 37993,
0,    38007, 37915, 37934, 39207, 38778, 0,    39184, 39165, 0,    0,    0,    0,    0,    0,     0,    0,    38853, 38891,
38859, 38836, 38601, 38645, 0,    37550,    37330, 0,    33761, 38895, 38919, 0,     0,     0,     0,     0,     0,     36784,
34816, 0,     0,     0,     0,     0,     75029, 0,     0,     79654, 81596, 0,     0,     77923, 77945, 81593, 81522,
81000, 75028, 75776, 0,     79652, 81001, 0,     165005, 103616, 0,     0,     0,    0,     0,     0,     0,     0,
0, 25030, 0)
) %>%
mutate(description = ifelse(N == 0, "Node Not in v9",NA))
Forgotten_Nodes <- odd_cases %>% filter(N ==0)
descrip <- v9_v832_nodes %>%
left_join(moved_nodes_good_guess, by = c("N_v832_guess" = "N_v832_correct")) %>%
left_join(odd_cases, by = c("N")) %>%
mutate(description = case_when(
!is.na(N_v832_correct) ~ "GEOGKEY matches",
N < 2890 ~ "Moved Centroid Node",
!is.na(N_v832_manual) ~ "Moved Node, Bad Guess",
!is.na(moved_node) ~ "Moved Node, Good Guess"
)) %>%
mutate(N_v832_correct = ifelse(description == "GEOGKEY matches", N_v832_correct,
ifelse(description == "Moved Centroid Node", N_v832_guess,
ifelse(description == "Moved Node, Bad Guess", N_v832_manual,
ifelse(description == "Moved Node, Good Guess", moved_node, N_v832_correct))))
)
sum(is.na(descrip$N_v832_correct))
write_csv(Forgotten_Nodes,"forgotten_nodes.csv")
descrip <- v9_v832_nodes %>%
left_join(moved_nodes_good_guess, by = c("N_v832_guess" = "N_v832_correct")) %>%
left_join(odd_cases, by = c("N")) %>%
mutate(description = case_when(
!is.na(N_v832_correct) ~ "GEOGKEY matches",
N < 2890 ~ "Moved Centroid Node",
!is.na(N_v832_manual) ~ "Moved Node, Bad Guess",
!is.na(moved_node) ~ "Moved Node, Good Guess"
)) %>%
mutate(N_v832_correct = ifelse(description == "GEOGKEY matches", N_v832_correct,
ifelse(description == "Moved Centroid Node", N_v832_guess,
ifelse(description == "Moved Node, Bad Guess", N_v832_manual,
ifelse(description == "Moved Node, Good Guess", moved_node, N_v832_correct))))
)
descrip <- v9_v832_nodes %>%
left_join(moved_nodes_good_guess, by = c("N_v832_guess" = "N_v832_correct")) %>%
left_join(odd_cases, by = c("N")) %>%
mutate(description = case_when(
!is.na(N_v832_correct) ~ "GEOGKEY matches",
N < 2890 ~ "Moved Centroid Node",
!is.na(N_v832_manual) ~ "Moved Node, Bad Guess",
!is.na(moved_node) ~ "Moved Node, Good Guess"
)) %>%
mutate(N_v832_correct = ifelse(description == "GEOGKEY matches", N_v832_correct,
ifelse(description == "Moved Centroid Node", N_v832_guess,
ifelse(description == "Moved Node, Bad Guess", N_v832_manual,
ifelse(description == "Moved Node, Good Guess", moved_node, N_v832_correct))))
) %>%
select(-N_v832_guess,-moved_mode,-N_v832_manual)
descrip <- v9_v832_nodes %>%
left_join(moved_nodes_good_guess, by = c("N_v832_guess" = "N_v832_correct")) %>%
left_join(odd_cases, by = c("N")) %>%
mutate(description = case_when(
!is.na(N_v832_correct) ~ "GEOGKEY matches",
N < 2890 ~ "Moved Centroid Node",
!is.na(N_v832_manual) ~ "Moved Node, Bad Guess",
!is.na(moved_node) ~ "Moved Node, Good Guess"
)) %>%
mutate(N_v832_correct = ifelse(description == "GEOGKEY matches", N_v832_correct,
ifelse(description == "Moved Centroid Node", N_v832_guess,
ifelse(description == "Moved Node, Bad Guess", N_v832_manual,
ifelse(description == "Moved Node, Good Guess", moved_node, N_v832_correct))))
) %>%
select(-N_v832_guess,-moved_node,-N_v832_manual)
write_csv(descrip, "node_key_v832_to_v9.csv")
v9_nodes <- read.dbf("data/MasterNet - 2022-05-25.dbf")
v832_nodes <- read.dbf("data/Master_2022-03-22_new.dbf") %>%
select(N,X,NEWX,Y,NEWY,GEOGKEY) %>% rename("N_v832_correct" = N)
22085 - 20363
sum(is.na(descrip$N_v832_correct))
sum(is.na(moved_nodes_bad_guess$moved_node))
sum(Forgotten_Nodes)
sum(Forgotten_Nodes$N)
Forgotten_Nodes
# there are 167 cases where a node exists in v832 but needs manual inspection to determine v9 node
odd_cases <- data.frame(
N_v832_manual = c(3679, 3687,  3798,  3933,  4270, 4276, 4299,  4452, 4479,  4567, 4720,  4730,  4775,  4814,  5081,  5203, 5231, 5463, 5794,
5799, 5895,  5955, 5963, 5992,  6000,   6073, 6074, 6079,  6130, 6139,  6201, 6324,  6366,  6414,  6419,  6461,  6468,
6551,  6554,  6567,  6586,  6588, 6590,  6609,  6611, 6694,  6698,  6723,  6727,  6729,  6751,  6761,  6762,  6763, 6764,
6770,  6772,  6816,  6866, 6894, 7010, 7031, 7090,  7095,  7111, 7135, 7137, 7179,  7197,  7354, 7458, 7459, 7466, 7600,
7608, 7777,  7891, 7904, 8011, 8088, 8203, 8224, 8260,  8286, 8311, 8357,  8394,  8429,  8550,  8551,  8586,  8606,  8607,
8632, 8656,  8658,  8727,  8748,  8840,  8843, 8870,  8874,  8876,  9010, 9279, 9523, 9524, 9525, 9526, 9527, 9535, 9547,
9549,  9552, 9581,  9589,  9608, 9628, 9656,  9670, 9949,  10778, 10896, 10992, 11057, 11289, 11727, 12033, 12156, 12225,
12245, 12257, 13114, 13157, 20148, 20465, 20843, 20941, 21856, 22013, 22015, 22322, 22442, 22571, 22665, 22666, 23234,
23351, 23544, 23736, 23745, 24008, 24276, 25158, 25159,  25160,  26037, 26711, 26774, 26775, 30308, 30834, 30847, 30874,
30975, 31666, 31670),
N =             c(1046, 36094, 35970, 34967, 0,    0,    36358, 0   , 34754, 0,    34479, 34494, 32153, 33489, 33734, 0,    0,    0,    0,
0,    31618, 0,    0,    38391,  38374, 0,    0,    38548, 0,    38413, 0,    39383, 37823, 36978, 37260, 37939, 36783,
37595, 38439, 39145, 39245, 0,    38019, 38090, 0,    38628, 38299, 38242, 38695, 38294, 38698, 38338, 38373, 0,    38687,
38780, 38509, 38807, 0,    0,    0,    0,    39155, 39190, 0,    0,    0,    38253, 39196, 0,    0,    0,    0,    0,
0,    38334, 0,    0,    0,    0,    0,    0,    39053, 0,    0,    38481, 39106, 37748, 38249, 38114, 37872, 38405, 37993,
0,    38007, 37915, 37934, 39207, 38778, 0,    39184, 39165, 0,    0,    0,    0,    0,    0,     0,    0,    38853, 38891,
38859, 38836, 38601, 38645, 0,    37550,    37330, 0,    33761, 38895, 38919, 0,     0,     0,     0,     0,     0,     36784,
34816, 0,     0,     0,     0,     0,     75029, 0,     0,     79654, 81596, 0,     0,     77923, 77945, 81593, 81522,
81000, 75028, 75776, 0,     79652, 81001, 0,     165005, 103616, 0,     0,     0,    0,     0,     0,     0,     0,
0, 25030, 0)
) %>%
mutate(description = ifelse(N == 0, "Node Not in v9",NA))
Forgotten_Nodes <- odd_cases %>% filter(N ==0)
write_csv(Forgotten_Nodes,"forgotten_nodes.csv")
descrip <- v9_v832_nodes %>%
left_join(moved_nodes_good_guess, by = c("N_v832_guess" = "N_v832_correct")) %>%
left_join(odd_cases, by = c("N")) %>%
mutate(description = case_when(
!is.na(N_v832_correct) ~ "GEOGKEY matches",
N < 2890 ~ "Moved Centroid Node",
!is.na(N_v832_manual) ~ "Moved Node, Bad Guess",
!is.na(moved_node) ~ "Moved Node, Good Guess"
)) %>%
mutate(N_v832_correct = ifelse(description == "GEOGKEY matches", N_v832_correct,
ifelse(description == "Moved Centroid Node", N_v832_guess,
ifelse(description == "Moved Node, Bad Guess", N_v832_manual,
ifelse(description == "Moved Node, Good Guess", moved_node, N_v832_correct))))
) %>%
select(-N_v832_guess,-moved_node,-N_v832_manual)
write_csv(descrip, "node_key_v832_to_v9.csv")
sum(is.na(descrip$N_v832_correct))
# there are 167 cases where a node exists in v832 but needs manual inspection to determine v9 node
odd_cases <- data.frame(
N_v832_manual = c(3679, 3687,  3798,  3933,  4270, 4276, 4299,  4452, 4479,  4567, 4720,  4730,  4775,  4814,  5081,  5203, 5231, 5463, 5794,
5799, 5895,  5955, 5963, 5992,  6000,   6073, 6074, 6079,  6130, 6139,  6201, 6324,  6366,  6414,  6419,  6461,  6468,
6551,  6554,  6567,  6586,  6588, 6590,  6609,  6611, 6694,  6698,  6723,  6727,  6729,  6751,  6761,  6762,  6763, 6764,
6770,  6772,  6816,  6866, 6894, 7010, 7031, 7090,  7095,  7111, 7135, 7137, 7179,  7197,  7354, 7458, 7459, 7466, 7600,
7608, 7777,  7891, 7904, 8011, 8088, 8203, 8224, 8260,  8286, 8311, 8357,  8394,  8429,  8550,  8551,  8586,  8606,  8607,
8632, 8656,  8658,  8727,  8748,  8840,  8843, 8870,  8874,  8876,  9010, 9279, 9523, 9524, 9525, 9526, 9527, 9535, 9547,
9549,  9552, 9581,  9589,  9608, 9628, 9656,  9670, 9949,  10778, 10896, 10992, 11057, 11289, 11727, 12033, 12156, 12225,
12245, 12257, 13114, 13157, 20148, 20465, 20843, 20941, 21856, 22013, 22015, 22322, 22442, 22571, 22665, 22666, 23234,
23351, 23544, 23736, 23745, 24008, 24276, 25158, 25159,  25160,  26037, 26711, 26774, 26775, 30308, 30834, 30847, 30874,
30975, 31666, 31670),
N =             c(1046, 36094, 35970, 34967, 0,    0,    36358, 0   , 34754, 0,    34479, 34494, 32153, 33489, 33734, 102116,    0,    0,    0,
0,    31618, 0,    0,    38391,  38374, 0,    0,    38548, 0,    38413, 0,    39383, 37823, 36978, 37260, 37939, 36783,
37595, 38439, 39145, 39245, 0,    38019, 38090, 0,    38628, 38299, 38242, 38695, 38294, 38698, 38338, 38373, 0,    38687,
38780, 38509, 38807, 0,    0,    0,    0,    39155, 39190, 0,    0,    0,    38253, 39196, 0,    0,    0,    0,    0,
0,    38334, 0,    0,    0,    0,    0,    0,    39053, 0,    0,    38481, 39106, 37748, 38249, 38114, 37872, 38405, 37993,
0,    38007, 37915, 37934, 39207, 38778, 0,    39184, 39165, 0,    0,    0,    0,    0,    0,     0,    0,    38853, 38891,
38859, 38836, 38601, 38645, 0,    37550,    37330, 0,    33761, 38895, 38919, 0,     0,     0,     0,     0,     0,     36784,
34816, 0,     0,     0,     0,     0,     75029, 0,     0,     79654, 81596, 0,     0,     77923, 77945, 81593, 81522,
81000, 75028, 75776, 0,     79652, 81001, 0,     165005, 103616, 0,     0,     0,    0,     0,     0,     0,     0,
0, 25030, 0)
) %>%
mutate(description = ifelse(N == 0, "Node Not in v9",NA))
Forgotten_Nodes <- odd_cases %>% filter(N ==0)
write_csv(Forgotten_Nodes,"forgotten_nodes.csv")
descrip <- v9_v832_nodes %>%
left_join(moved_nodes_good_guess, by = c("N_v832_guess" = "N_v832_correct")) %>%
left_join(odd_cases, by = c("N")) %>%
mutate(description = case_when(
!is.na(N_v832_correct) ~ "GEOGKEY matches",
N < 2890 ~ "Moved Centroid Node",
!is.na(N_v832_manual) ~ "Moved Node, Bad Guess",
!is.na(moved_node) ~ "Moved Node, Good Guess"
)) %>%
mutate(N_v832_correct = ifelse(description == "GEOGKEY matches", N_v832_correct,
ifelse(description == "Moved Centroid Node", N_v832_guess,
ifelse(description == "Moved Node, Bad Guess", N_v832_manual,
ifelse(description == "Moved Node, Good Guess", moved_node, N_v832_correct))))
) %>%
select(-N_v832_guess,-moved_node,-N_v832_manual)
write_csv(descrip, "node_key_v832_to_v9.csv")
sum(is.na(descrip$N_v832_correct))
#' needed libraries
library(tidyverse)
library(sf)
library(knitr)
library(kableExtra)
library(magrittr)
library(leaflet)
library(tidycensus)
library(tigris)
source("efa_analysis_scripts.R")
#source("efa_analysis_scripts.R")
source("R/efamap/efa_analysis_scripts.R")
#' needed libraries
library(tidyverse)
library(sf)
library(knitr)
library(kableExtra)
library(magrittr)
library(leaflet)
library(tidycensus)
rs.restartR()
.rs.restartR()
#' needed libraries
library(tidyverse)
library(sf)
library(knitr)
#' needed libraries
library(tidyverse)
library(sf)
library(knitr)
library(kableExtra)
library(magrittr)
library(leaflet)
library(tidycensus)
library(tigris)
#source("efa_analysis_scripts.R")
source("R/efamap/efa_analysis_scripts.R")
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Read in the data needed to determine the EFAs
wfrc_counties <- c("Utah","Davis","Salt Lake","Weber","Box Elder")
wfrcboundary <- st_read("data/WFRCBoundary2018/WFRCBoundary2018.shp") %>% summarize(geometry = st_union(geometry)) %>%
st_transform(4326)
wfrc_blockgroups <- block_groups("UT",county = wfrc_counties,cb=TRUE) %>%
st_transform(4326)
minVars <- paste0("B03002_00", c(1,3))
minority20 <- get_acs_wfrc("block group", minVars, "UT", wfrc_counties,2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
incVars <- paste0("C17002_00", c(1:3))
income20 <- get_acs_wfrc("block group",incVars,"UT",wfrc_counties,2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
# Basic Table Analysis -------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' manipulate all three tables used to determine EFAs. For each table, calculate the percentage
#' for each block group.
MinorityTable2020 <- minority_percent(minority20)
PovertyTable2020 <- poverty_percent(income20) %>% select(-Perc_Pov25)
View(MinorityTable2020)
View(PovertyTable2020)
efa2020 <- left_join(MinorityTable2020,PovertyTable2020,by=c("NAME","GEOID")) %>%
mutate(HighestPerc = pmax(Perc_Pov20,Perc_Minorit))
View(efa2020)
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Read in the data needed to redetermine the EFAs
wfrc_counties <- c("Utah","Davis","Salt Lake","Weber","Box Elder")
efashp2017 <- st_read("data/Equity_Focus_Areas/EquityFocusAreas.shp") %>%  st_transform(4326)
wfrcboundary <- st_read("data/WFRCBoundary2018/WFRCBoundary2018.shp") %>% summarize(geometry = st_union(geometry)) %>%
st_transform(4326)
wfrc_blockgroups <- block_groups("UT",county = wfrc_counties,cb=TRUE) %>%
st_transform(4326)
minVars <- paste0("B03002_00", c(1,3))
minority20 <- get_acs_wfrc("block group", minVars, "UT", wfrc_counties,2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
vehVars <- c(paste0("B25044_00",c(1,3)),"B25044_010")
vehicles20 <- get_acs_wfrc("block group", vehVars, "UT", wfrc_counties, 2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
incVars <- paste0("C17002_00", c(1:3))
income20 <- get_acs_wfrc("block group",incVars,"UT",wfrc_counties,2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
groupQuarter <- read_csv("data/DECENNIALPL2020.P5/DECENNIALPL2020.P5_data_with_overlays_2022-06-23T135404.csv")
# Basic Table Analysis -------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' manipulate all three tables used to determine EFAs. For each table, calculate the percentage
#' for each block group. Additionally, calculate whether or not each block meets the default
#' threshold set a few years ago
MinorityTable2020 <- minority_percent(minority20)
PovertyTable2020 <- poverty_percent(income20)
VehicleTable2020 <- vehicle_percent(vehicles20)
# Extra data to display on the final map
GroupQuarter2020 <- groupQuarter [-1,] %>%
rename("IP" = P5_002N, "IP_Correctional" = P5_003N,"IP_Juvenile" = P5_004N, "IP_Nursing" = P5_005N, "IP_Other" = P5_006N,
"NIP" = P5_007N, "NIP_College"=P5_008N,"NIP_Military"=P5_009N,"NIP_Other"=P5_010N) %>%
mutate(IP = as.numeric(IP),IP_Correctional=as.numeric(IP_Correctional),IP_Juvenile=as.numeric(IP_Juvenile),IP_Nursing=as.numeric(IP_Nursing),IP_Other=as.numeric(IP_Other),
NIP = as.numeric(NIP),NIP_College=as.numeric(NIP_College),NIP_Military=as.numeric(NIP_Military),NIP_Other=as.numeric(NIP_Other),
GEOID = substring(GEO_ID,10)) %>% select(-GEO_ID)
#' join together all four tables
efa2020 <- initial_join20(MinorityTable2020,VehicleTable2020,PovertyTable2020,GroupQuarter2020)
# Join Tables and Region Geography -------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' join together the joint table with the block group shapefile to assign a geometry
#' to each of the block group locations. Additionally, filter out all block groups that
#' are not within the WFRC/MAG model region. Also, determine whether or not each
#' region's percentage is within the calculated thresehold (whether or not it is
#' at least one standard devation from the region's mean)
efa2020shpb4 <- geometry_calculate(efa2020,wfrc_blockgroups)
# select the columns needed for further analysis
efa2020shp <- efa2020shpb4 %>%
select(OBJECTID,SHAPE,Geography,Population,Poverty,PercPovert,SD_Pov,Perc_Pov25,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,ZeroCar,PercZeroCa,SD_ZeroCar,Perc_ZeroCar,HighestStDev,HighestPerc25wCar,HighestPerc20wCar,HighestPerc25woCar,HighestPerc20woCar,IP,IP_Correctional,IP_Juvenile,IP_Nursing,IP_Other,NIP,NIP_College,NIP_Military,NIP_Other)
View(efa2020shp)
#Create EFA GeoPackage for Original Analysis -------------------------------------------------------------------------------------------------------------------------------------------------------------#
efaPerc2020shp <- efa2020shp %>% filter(HighestPerc25wCar > 0) %>%
delete_low_pop_dens()
efaSD2020shp <- efa2020shp %>% filter(HighestStDev > 0) %>%
delete_low_pop_dens()
#Create EFA GeoPackage for Secondary Analysis-------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' create more spatial options where we adjust slightly the percentage calculation by using a poverty threshold of 20% instead of 25%
efaPerc2020Pov25NoCarshp <- efa2020shp %>% filter(HighestPerc25woCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-25% Min-40%",color = "blue")
efaPerc2020Pov20NoCarshp<- efa2020shp %>% filter(HighestPerc20woCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-20% Min-40%",color = "red")
efaPerc2020Pov20Carshp <- efa2020shp %>% filter(HighestPerc20wCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-20% Min 40% Veh-10%",color = "yellow")
efaPerc2017shp <- efashp2017 %>%  mutate(Perc_Pov25 = ifelse(PercPovert > 0.25,1,0), Perc_Pov20 = ifelse(PercPovert > 0.2,1,0)) %>%
mutate(SD_Pov = as.numeric(SD_Pov),SD_Minorit = as.numeric(SD_Minorit),SD_ZeroCar = as.numeric(SD_ZeroCar),HighestStD = as.numeric(HighestStD)) %>%
mutate(HighestPerc25woCar = pmax(Perc_Pov25,SD_Minorit), HighestPerc20woCar = pmax(Perc_Pov20,SD_Minorit),SHAPE = geometry)
efaPerc2017Pov25NoCarshp <- efaPerc2017shp %>% filter(HighestPerc25woCar > 0) %>% mutate(group = "2017 Pov-25% Min-40%",color = "green")
efaPerc2017Pov20NoCarshp<- efaPerc2017shp %>% filter(HighestPerc20woCar > 0) %>% mutate(group = "2017 Pov-20% Min-40%",color = "purple")
efaPerc2017Pov25Carshp <- efaPerc2017shp %>% filter(HighestStD > 0) %>% mutate(group = "2017 Pov-25% Min-40% Veh-10%", color = "gray")
efaAnalysis <- bind_rows(list(efaPerc2020Pov25NoCarshp,efaPerc2020Pov20NoCarshp,efaPerc2020Pov20Carshp,efaPerc2017Pov25NoCarshp,efaPerc2017Pov20NoCarshp,efaPerc2017Pov25Carshp)) %>%
mutate(group = as.factor(group))
View(efaPerc2017Pov20NoCarshp)
View(efaPerc2020Pov20NoCarshp)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,Perc_Pov20,Minority,PercMinori,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens)
View(efa2020FinalZones)
View(efaPerc2017Pov25NoCarshp)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,Perc_Pov20,Minority,PercMinori,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE)
View(efa2020FinalZones)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,Perc_Pov20,Minority,PercMinori,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minori40" = Perc_Minorit, "HighestPerc" = "HIghestPerc20woCar")
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,Perc_Pov20,Minority,PercMinori,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minori40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,Perc_Pov20,Minority,PercMinori,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,Perc_Pov20,Minority,PercMinori,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = Perc_Minorit)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,Perc_Pov20,Minority,PercMinori,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = Perc_Minori)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,Perc_Pov20,Minority,PercMinori,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = PercMinori)
geojsonio::geojson_write(efa2020FinalZones,file = "outputs/results/efa2020.geojson")
efa2020final_json <- geojsonio::geojson_json(efa2020FinalZones)
library(geojsonio)
efa2020final_json <- geojson_json(efa2020FinalZones)
View(efa2020FinalZones)
View(efa2020FinalZones[[13]][[1]])
efa2020final_json <- geojson_json(efa2020FinalZones, geometry = "polygon")
efa2020final_json <- geojson_json(efa2020FinalZones, lat = 'longitude',lon = 'latitude' ,geometry = "polygon")
install.packages("geojsonlint")
efa2020final_json <- geojson_json(efa2020FinalZones, lat = 'longitude',lon = 'latitude' ,geometry = "polygon")
geojsonio::geojson_write(efa2020FinalZones,file = "outputs/results/efa2020.geojson")
geojsonio::geojson_write(efa2020final_json,file = "outputs/results/efa2020.geojson")
runApp("R/efamap")
library(tidyverse)
library(tidyverse)
library(sf)
library(knitr)
library(kableExtra)
library(magrittr)
library(leaflet)
library(shiny)
library(shinydashboard)
library(rsconnect)
library(tidycensus)
library(tidyverse)
library(sf)
library(knitr)
library(kableExtra)
library(magrittr)
library(leaflet)
library(shiny)
library(shinydashboard)
library(rsconnect)
library(tidycensus)
library(tigris)
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%  # providers$Esri.WorldStreetMap
addLegend(
"bottomright",
pal = pal,
values = filtered_factors$score,
title = "Legend",
opacity = 1
)
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
rsconnect::deployApp("R/efamap")
runApp("R/efamap")
library(tidyverse)
library(tidyverse)
library(sf)
library(knitr)
library(kableExtra)
library(magrittr)
library(leaflet)
library(shiny)
library(shinydashboard)
library(rsconnect)
library(tidycensus)
library(tigris)
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
runApp("R/efamap")
