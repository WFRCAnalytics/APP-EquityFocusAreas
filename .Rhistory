scale_fill_manual(values = pal,drop = FALSE,na.value = "grey80",
guide = guide_legend(direction = "horizontal",nrow = 1,label.position = "bottom"))+
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5)) +
theme(plot.caption = element_text(size = 7, face = "italic"),legend.position = "bottom") +
ggtitle(paste0(modeOMX$AccessMode[1], "_",mode," - ATO by Trips"))
}
#' This function attaches the TAZ spatial object to the summarized OMX skim data to
#' allow for choropleth map generation. In addition, the trip "groupings" are decided
#' and put into 6 categories based on low to high trips occuring.
spatialOMX <- function(sumOMX, tazFile){
br <- c(0,475,950,1425,1900,2375,2850)
sumOMX %>%
arrange(fileName,TAZID) %>%
left_join(tazFile, by = c("TAZID" = "TAZID")) %>%
st_as_sf() %>%
mutate(AccessMode = substr(fileName,0,3),
TransitMode = substr(fileName,5,7),
PkOk = substr(fileName, 9,10)) %>%
mutate(Trips= cut(count, breaks = br, dig.lab = 5))
}
#' This function summarizes the parsed OMX skim data by origin and destination. The
#' total number of trips that occur at each TAZ of both origin and destination are summed
#' up and then bound together into one table
summarizeOMX <- function(modeOMX){
Otable <- modeOMX %>%
group_by(fileName, origin)%>%
summarize(count = n()) %>%
mutate(OD = "origin", TAZID = origin) %>%
select(-origin)
Dtable <- modeOMX %>%
group_by(fileName, destination)%>%
summarize(count = n()) %>%
mutate(OD = "destination", TAZID = destination) %>%
select(-destination)
bind_rows(Otable,Dtable)
}
#' This function using the omxr "read_all_omx" function to read in the "BOARDINGS"
#' data. Any origin-destination zone pair within a "BOARDINGS" value of 0 is filtered
#' out, assuming that no transit occurs between that particular match up.
parseOMX <- function(names, names2, col_list){
names %>%
lapply(read_all_omx, col_list) %>%
lapply(filter, BOARDINGS > 0) %>%
bind_rows(.id = "id") %>%
left_join(names2) %>%
mutate(AccessMode = substr(fileName,0,3),
TransitMode = substr(fileName,5,7),
PkOk = substr(fileName, 9,10))
}
#------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Functions
#' This function creates the naming table to be used to assist in summarizing the data
create_name_table <- function(names){
data.frame(fileName = names, id = as.character(1:length(names))) %>%
mutate(fileName = gsub(".*skm_transit_for_estimation_","",fileName))
}
# Locations of the skims, taz, and output file paths
skimsLoc <- "A:/1 - TDM/2 - Estimate Param/4 - ModeChoice/1 - Access Link and Transit Skims/_testing_environment/Outputs/Skims/omx_conversion/"
#------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Libraries needed to run this script
library(omxr)
library(tidyverse)
library(sf)
library(ggmap)
library(purrr)
# Locations of the skims, taz, and output file paths
skimsLoc <- "A:/1 - TDM/2 - Estimate Param/4 - ModeChoice/1 - Access Link and Transit Skims/_testing_environment/Outputs/Skims/omx_conversion/"
tazLoc <- "A:/1 - TDM/1 - Input Dev/1 - TAZ/TAZ & SE through the ages/TAZ Chronology/TAZ 2017/TAZ.shp"
mapLoc <- "A:/1 - TDM/2 - Estimate Param/4 - ModeChoice/1 - Access Link and Transit Skims/_testing_environment/Checks/MapChecks/"
# TAZ spatial object
taz <- st_read(tazLoc) %>% select(TAZID)
#' Below we create a name-id convention to correspond with the bike, walk, kiss-n-ride
#' and park-n-ride modes based on their file names. This will be useful when parsing
#' and summarizing the OMX data
bike_names <- list.files(path = skimsLoc, pattern = "BIK*", full.names = T)
bike_names2 <- create_name_table(bike_names)
walk_names <- list.files(path = skimsLoc, pattern = "WLK*", full.names = T)
walk_names2 <- create_name_table(walk_names)
knr_names <- list.files(path = skimsLoc, pattern = "KNR*", full.names = T)
knr_names2 <- create_name_table(knr_names)
pnr_names <- list.files(path = skimsLoc, pattern = "PNR*", full.names = T)
pnr_names2 <- create_name_table(pnr_names)
#' Below we parse and summarize the skim matrices by determining the number of
#' "BOARDINGS" attributes that exist within each zone by origin, destination and
#' period. Then, the taz spatial object is joined to allow for easy mapping
bikeOMX <- parseOMX(bike_names, bike_names2, c("BOARDINGS")) %>% summarizeOMX() %>% spatialOMX(taz)
walkOMX <- parseOMX(walk_names, walk_names2, c("BOARDINGS")) %>% summarizeOMX() %>% spatialOMX(taz)
knrOMX <- parseOMX(knr_names, knr_names2, c("BOARDINGS")) %>% summarizeOMX() %>% spatialOMX(taz)
pnrOMX <- parseOMX(pnr_names, pnr_names2, c("BOARDINGS")) %>% summarizeOMX() %>% spatialOMX(taz)
#' Below we create a ggplot object for each of the 12 origin-destination map pairs
#' These maps are based on modes, with period totals being summed together
bikeBSC <- odPlotter(bikeOMX,"BSC")
bikePRM <- odPlotter(bikeOMX,"PRM")
bikeMIX <- odPlotter(bikeOMX, "MIX")
walkBSC <- odPlotter(walkOMX,"BSC")
walkPRM <- odPlotter(walkOMX,"PRM")
walkMIX <- odPlotter(walkOMX, "MIX")
knrBSC <- odPlotter(knrOMX,"BSC")
knrPRM <- odPlotter(knrOMX,"PRM")
knrMIX <- odPlotter(knrOMX, "MIX")
pnrBSC <- odPlotter(pnrOMX,"BSC")
pnrPRM <- odPlotter(pnrOMX,"PRM")
pnrMIX <- odPlotter(pnrOMX, "MIX")
#' To easily visualize the data, below we output all the ggplot objects to
#' PNG files
plots <- list("bikeBSC" = bikeBSC, "bikePRM" = bikePRM, "bikeMIX" = bikeMIX,
"walkBSC" = walkBSC, "walkPRM" = walkPRM, "walkMIX" = walkMIX,
"knrBSC" = knrBSC, "knrPRM" = knrPRM, "knrMIX" = knrMIX,
"pnrBSC" = pnrBSC, "pnrPRM" = pnrPRM, "pnrMIX" = pnrMIX)
file_names <- stringr::str_c(names(plots), ".png")
pwalk(list(file_names, plots),ggsave,width=8,height=6, path = paste0(mapLoc, "ATO"))
#' This function plots the choropleth maps. It first retrieves the basemap layer.
#' Then, it determines the color palette. Finally, it plots the basemap and the
#' OMX spatial/summarized data by coloring zones with larger number of trips as darker
#' and zones with fewer number of trips as lighter.
odPlotter <- function(modeOMX, mode){
mapBound <- modeOMX %>% sf::st_transform(4326) %>%
st_bbox() %>% st_as_sfc() %>% st_buffer(0.02) %>%
st_bbox() %>% as.numeric()
#“terrain”, “terrain-background”, “terrain-labels”, “terrain-lines”, “toner”, “toner-2010”, “toner-2011”, “toner-background”, “toner-hybrid”, “toner-labels”, “toner-lines”, “toner-lite”, “watercolor”
man_basemap <- ggmap::get_stamenmap(bbox = mapBound, zoom = 11, messaging = FALSE, maptype = 'watercolor')
ggmap(man_basemap)+
geom_sf(data = modeOMX %>% filter(TransitMode == mode) %>% sf::st_transform(4326),
aes(fill = minD), inherit.aes = FALSE, color = "NA") +
facet_grid(~factor(OD, levels=c("origin","destination"))) +
scale_fill_viridis_c(option = "inferno", trans = "reverse") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5)) +
theme(plot.caption = element_text(size = 7, face = "italic"),legend.position = "right") +
ggtitle(paste0(modeOMX$AccessMode[1], "_",mode," - Minimum Distance to Transit by \n Origin (access) and Destination (egress)")) +
guides(fill=guide_legend(title="Distance (mi)"))
}
#' This function attaches the TAZ spatial object to the summarized OMX skim data to
#' allow for choropleth map generation. In addition, the trip "groupings" are decided
#' and put into 6 categories based on low to high trips occurring.
spatialOMX <- function(sumOMX, tazFile){
sumOMX %>%
arrange(fileName,TAZID) %>%
left_join(tazFile, by = c("TAZID" = "TAZID")) %>%
st_as_sf() %>%
mutate(AccessMode = substr(fileName,0,3),
TransitMode = substr(fileName,5,7),
PkOk = substr(fileName, 9,10))
}
#' This function summarizes the parsed OMX skim data by origin and destination. The
#' total number of trips that occur at each TAZ of both origin and destination are summed
#' up and then bound together into one table
minOMX <- function(modeOMX){
Otable <- modeOMX %>%
group_by(fileName, origin)%>%
summarize(minD = min(DA)) %>%
mutate(OD = "origin", TAZID = origin, type = "access") %>%
select(-origin)
Dtable <- modeOMX %>%
group_by(fileName, destination)%>%
summarize(minD = min(DE)) %>%
mutate(OD = "destination", TAZID = destination, type = "egress") %>%
select(-destination)
bind_rows(Otable,Dtable)
}
#' This function using the omxr "read_all_omx" function to read in the "BOARDINGS"
#' data. Any origin-destination zone pair within a "BOARDINGS" value of 0 is filtered
#' out, assuming that no transit occurs between that particular match up.
parseOMX <- function(names, names2, col_list){
names %>%
lapply(read_all_omx, col_list) %>%
lapply(filter, BOARDINGS > 0) %>%
bind_rows(.id = "id") %>%
left_join(names2) %>%
mutate(AccessMode = substr(fileName,0,3),
TransitMode = substr(fileName,5,7),
PkOk = substr(fileName, 9,10))
}
#------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Functions
#' This function creates the naming table to be used to assist in summarizing the data
create_name_table <- function(names){
data.frame(fileName = names, id = as.character(1:length(names))) %>%
mutate(fileName = gsub(".*skm_transit_for_estimation_","",fileName))
}
#------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Libraries needed to run this script
library(omxr)
library(tidyverse)
library(sf)
library(ggmap)
library(purrr)
library(viridis)
# Locations of the skims, taz, and output file paths
skimsLoc <- "A:/1 - TDM/2 - Estimate Param/4 - ModeChoice/1 - Access Link and Transit Skims/_testing_environment/Outputs/Skims/omx_conversion/"
tazLoc <- "A:/1 - TDM/1 - Input Dev/1 - TAZ/TAZ & SE through the ages/TAZ Chronology/TAZ 2017/TAZ.shp"
mapLoc <- "A:/1 - TDM/2 - Estimate Param/4 - ModeChoice/1 - Access Link and Transit Skims/_testing_environment/Checks/MapChecks/"
# TAZ spatial object
taz <- st_read(tazLoc) %>% select(TAZID)
#' Below we create a name-id convention to correspond with the bike, walk, kiss-n-ride
#' and park-n-ride modes based on their file names. This will be useful when parsing
#' and summarizing the OMX data
bike_names <- list.files(path = skimsLoc, pattern = "BIK*", full.names = T)
bike_names2 <- create_name_table(bike_names)
walk_names <- list.files(path = skimsLoc, pattern = "WLK*", full.names = T)
walk_names2 <- create_name_table(walk_names)
knr_names <- list.files(path = skimsLoc, pattern = "KNR*", full.names = T)
knr_names2 <- create_name_table(knr_names)
pnr_names <- list.files(path = skimsLoc, pattern = "PNR*", full.names = T)
pnr_names2 <- create_name_table(pnr_names)
#' Below we parse and summarize the skim matrices by determining the number of
#' "BOARDINGS" attributes that exist within each zone by origin, destination and
#' period. Then, the taz spatial object is joined to allow for easy mapping
bikeOMX <- parseOMX(bike_names, bike_names2, c("BOARDINGS", "DA_BIK", "DE_BIK")) %>%
mutate(DA = DA_BIK, DE = DE_BIK) %>%
minOMX() %>%
spatialOMX(taz)
walkOMX <- parseOMX(walk_names, walk_names2, c("BOARDINGS", "DA_WLK", "DE_WLK")) %>%
mutate(DA = DA_WLK, DE = DE_WLK) %>%
minOMX() %>%
spatialOMX(taz)
knrOMX <- parseOMX(knr_names, knr_names2, c("BOARDINGS", "DA_KNR", "DA_WLK", "DE_WLK")) %>%
mutate(DA = DA_WLK + DA_KNR, DE = DE_WLK) %>%
minOMX() %>%
spatialOMX(taz)
pnrOMX <- parseOMX(pnr_names, pnr_names2, c("BOARDINGS", "DA_PNR", "DA_WLK", "DE_WLK")) %>%
mutate(DA = DA_WLK + DA_PNR, DE = DE_WLK) %>%
minOMX() %>%
spatialOMX(taz)
#' Below we create a ggplot object for each of the 12 origin-destination map pairs
#' These maps are based on modes, with period totals being summed together
bikeBSC <- odPlotter(bikeOMX,"BSC")
bikePRM <- odPlotter(bikeOMX,"PRM")
bikeMIX <- odPlotter(bikeOMX, "MIX")
walkBSC <- odPlotter(walkOMX,"BSC")
walkPRM <- odPlotter(walkOMX,"PRM")
walkMIX <- odPlotter(walkOMX, "MIX")
knrBSC <- odPlotter(knrOMX,"BSC")
knrPRM <- odPlotter(knrOMX,"PRM")
knrMIX <- odPlotter(knrOMX, "MIX")
pnrBSC <- odPlotter(pnrOMX,"BSC")
pnrPRM <- odPlotter(pnrOMX,"PRM")
pnrMIX <- odPlotter(pnrOMX, "MIX")
#' To easily visualize the data, below we output all the ggplot objects to
#' PNG files
plots <- list("bikeBSC" = bikeBSC, "bikePRM" = bikePRM, "bikeMIX" = bikeMIX,
"walkBSC" = walkBSC, "walkPRM" = walkPRM, "walkMIX" = walkMIX,
"knrBSC" = knrBSC, "knrPRM" = knrPRM, "knrMIX" = knrMIX,
"pnrBSC" = pnrBSC, "pnrPRM" = pnrPRM, "pnrMIX" = pnrMIX)
file_names <- stringr::str_c(names(plots), ".png")
pwalk(list(file_names, plots),ggsave,width=8,height=6, path = paste0(mapLoc, "Distance"))
#' needed libraries
library(tidyverse)
library(sf)
library(knitr)
library(kableExtra)
library(magrittr)
library(leaflet)
library(tidycensus)
library(tigris)
library(geojsonio)
library(geojsonlint)
source("efa_analysis_scripts.R")
library(sf)
library(knitr)
library(kableExtra)
library(magrittr)
library(leaflet)
library(tidycensus)
library(tigris)
library(geojsonio)
library(geojsonlint)
#source("efa_analysis_scripts.R")
source("R/efamap/efa_analysis_scripts.R")
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Read in the data needed to redetermine the EFAs
wfrc_counties <- c("Utah","Davis","Salt Lake","Weber","Box Elder")
census_api_key("0196454888e2441971be7360589dd0399e036978")
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Read in the data needed to redetermine the EFAs
wfrc_counties <- c("Utah","Davis","Salt Lake","Weber","Box Elder")
efashp2017 <- st_read("data/Equity_Focus_Areas/EquityFocusAreas.shp") %>%  st_transform(4326)
wfrcboundary <- st_read("data/WFRCBoundary2018/WFRCBoundary2018.shp") %>% summarize(geometry = st_union(geometry)) %>%
st_transform(4326)
wfrc_blockgroups <- block_groups("UT",county = wfrc_counties,cb=TRUE) %>%
st_transform(4326)
minVars <- paste0("B03002_00", c(1,3))
minority20 <- get_acs_wfrc("block group", minVars, "UT", wfrc_counties,2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
vehVars <- c(paste0("B25044_00",c(1,3)),"B25044_010")
vehicles20 <- get_acs_wfrc("block group", vehVars, "UT", wfrc_counties, 2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
incVars <- paste0("C17002_00", c(1:3))
income20 <- get_acs_wfrc("block group",incVars,"UT",wfrc_counties,2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
groupQuarter <- read_csv("data/DECENNIALPL2020.P5/DECENNIALPL2020.P5_data_with_overlays_2022-06-23T135404.csv")
# Basic Table Analysis -------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' manipulate all three tables used to determine EFAs. For each table, calculate the percentage
#' for each block group. Additionally, calculate whether or not each block meets the default
#' threshold set a few years ago
MinorityTable2020 <- minority_percent(minority20)
PovertyTable2020 <- poverty_percent(income20)
VehicleTable2020 <- vehicle_percent(vehicles20)
# Extra data to display on the final map
GroupQuarter2020 <- groupQuarter [-1,] %>%
rename("IP" = P5_002N, "IP_Correctional" = P5_003N,"IP_Juvenile" = P5_004N, "IP_Nursing" = P5_005N, "IP_Other" = P5_006N,
"NIP" = P5_007N, "NIP_College"=P5_008N,"NIP_Military"=P5_009N,"NIP_Other"=P5_010N) %>%
mutate(IP = as.numeric(IP),IP_Correctional=as.numeric(IP_Correctional),IP_Juvenile=as.numeric(IP_Juvenile),IP_Nursing=as.numeric(IP_Nursing),IP_Other=as.numeric(IP_Other),
NIP = as.numeric(NIP),NIP_College=as.numeric(NIP_College),NIP_Military=as.numeric(NIP_Military),NIP_Other=as.numeric(NIP_Other),
GEOID = substring(GEO_ID,10)) %>% select(-GEO_ID)
#' join together all four tables
efa2020 <- initial_join20(MinorityTable2020,VehicleTable2020,PovertyTable2020,GroupQuarter2020)
# Join Tables and Region Geography -------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' join together the joint table with the block group shapefile to assign a geometry
#' to each of the block group locations. Additionally, filter out all block groups that
#' are not within the WFRC/MAG model region. Also, determine whether or not each
#' region's percentage is within the calculated thresehold (whether or not it is
#' at least one standard devation from the region's mean)
efa2020shpb4 <- geometry_calculate(efa2020,wfrc_blockgroups)
# select the columns needed for further analysis
efa2020shp <- efa2020shpb4 %>%
select(OBJECTID,SHAPE,Geography,Population,Poverty,PercPovert,SD_Pov,Perc_Pov25,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,ZeroCar,PercZeroCa,SD_ZeroCar,Perc_ZeroCar,HighestStDev,HighestPerc25wCar,HighestPerc20wCar,HighestPerc25woCar,HighestPerc20woCar,IP,IP_Correctional,IP_Juvenile,IP_Nursing,IP_Other,NIP,NIP_College,NIP_Military,NIP_Other)
#Create EFA GeoPackage for Original Analysis -------------------------------------------------------------------------------------------------------------------------------------------------------------#
efaPerc2020shp <- efa2020shp %>% filter(HighestPerc25wCar > 0) %>%
delete_low_pop_dens()
efaSD2020shp <- efa2020shp %>% filter(HighestStDev > 0) %>%
delete_low_pop_dens()
#Create EFA GeoPackage for Secondary Analysis-------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' create more spatial options where we adjust slightly the percentage calculation by using a poverty threshold of 20% instead of 25%
efaPerc2020Pov25NoCarshp <- efa2020shp %>% filter(HighestPerc25woCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-25% Min-40%",color = "blue")
efaPerc2020Pov20NoCarshp<- efa2020shp %>% filter(HighestPerc20woCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-20% Min-40%",color = "red")
efaPerc2020Pov20Carshp <- efa2020shp %>% filter(HighestPerc20wCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-20% Min 40% Veh-10%",color = "yellow")
efaPerc2017shp <- efashp2017 %>%  mutate(Perc_Pov25 = ifelse(PercPovert > 0.25,1,0), Perc_Pov20 = ifelse(PercPovert > 0.2,1,0)) %>%
mutate(SD_Pov = as.numeric(SD_Pov),SD_Minorit = as.numeric(SD_Minorit),SD_ZeroCar = as.numeric(SD_ZeroCar),HighestStD = as.numeric(HighestStD)) %>%
mutate(HighestPerc25woCar = pmax(Perc_Pov25,SD_Minorit), HighestPerc20woCar = pmax(Perc_Pov20,SD_Minorit),SHAPE = geometry)
efaPerc2017Pov25NoCarshp <- efaPerc2017shp %>% filter(HighestPerc25woCar > 0) %>% mutate(group = "2017 Pov-25% Min-40%",color = "green")
efaPerc2017Pov20NoCarshp<- efaPerc2017shp %>% filter(HighestPerc20woCar > 0) %>% mutate(group = "2017 Pov-20% Min-40%",color = "purple")
efaPerc2017Pov25Carshp <- efaPerc2017shp %>% filter(HighestStD > 0) %>% mutate(group = "2017 Pov-25% Min-40% Veh-10%", color = "gray")
efaAnalysis <- bind_rows(list(efaPerc2020Pov25NoCarshp,efaPerc2020Pov20NoCarshp,efaPerc2020Pov20Carshp,efaPerc2017Pov25NoCarshp,efaPerc2017Pov20NoCarshp,efaPerc2017Pov25Carshp)) %>%
mutate(group = as.factor(group))
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,Perc_Pov20,Minority,PercMinori,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = PercMinori)
utahHealth <- st_read("data/Utah_Health_Care_Facilities/HealthCareFacilities.shp") %>%  st_transform(4326) %>%
mutate(intersection = as.integer(st_intersects(geometry, wfrcboundary))) %>% filter(is.na(intersection) == FALSE) %>%
mutate(group = "Health Care Facilities")
utahSchools <- st_read("data/Utah_Schools_Higher_Education/Schools_HigherEducation.shp") %>%  st_transform(4326) %>%
mutate(intersection = as.integer(st_intersects(geometry, wfrcboundary))) %>% filter(is.na(intersection) == FALSE) %>%
mutate(group = "Higher Education Facilities")
View(efa2020FinalZones)
View(efaPerc2020Pov20NoCarshp)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,SD_Pov,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = PercMinori)
View(efa2020FinalZones)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,SD_Pov,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = PercMinori) %>%
mutate(HighestStDev = pmax(SD_Pov,SD_Minorit))
View(efa2020FinalZones)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,SD_Pov,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = PercMinori) %>%
mutate(HighestStDev = pmax(SD_Pov,SD_Minorit))
View(efa2020FinalZones)
st_write(efa2020FinalZones, dsn = "outputs/results/EquityFocusAreas2020v3.gpkg", layer = "EFA2020Pov20NoCar",append=TRUE)
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Read in the data needed to redetermine the EFAs
wfrc_counties <- c("Utah","Davis","Salt Lake","Weber","Box Elder")
View(MinorityTable2020)
View(PovertyTable2020)
View(GroupQuarter2020)
View(minority20)
View(vehicles20)
View(VehicleTable2020)
VehicleTable2020 <- vehicle_percent(vehicles20)
#' needed libraries
library(tidyverse)
library(sf)
library(knitr)
library(kableExtra)
library(magrittr)
library(leaflet)
library(tidycensus)
library(tigris)
library(geojsonio)
library(geojsonlint)
#source("efa_analysis_scripts.R")
source("R/efamap/efa_analysis_scripts.R")
census_api_key("0196454888e2441971be7360589dd0399e036978")
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Read in the data needed to redetermine the EFAs
wfrc_counties <- c("Utah","Davis","Salt Lake","Weber","Box Elder")
efashp2017 <- st_read("data/Equity_Focus_Areas/EquityFocusAreas.shp") %>%  st_transform(4326)
wfrcboundary <- st_read("data/WFRCBoundary2018/WFRCBoundary2018.shp") %>% summarize(geometry = st_union(geometry)) %>%
st_transform(4326)
wfrc_blockgroups <- block_groups("UT",county = wfrc_counties,cb=TRUE) %>%
st_transform(4326)
minVars <- paste0("B03002_00", c(1,3))
minority20 <- get_acs_wfrc("block group", minVars, "UT", wfrc_counties,2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
vehVars <- c(paste0("B25044_00",c(1,3)),"B25044_010")
vehicles20 <- get_acs_wfrc("block group", vehVars, "UT", wfrc_counties, 2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
incVars <- paste0("C17002_00", c(1:3))
income20 <- get_acs_wfrc("block group",incVars,"UT",wfrc_counties,2020) %>% select(-moe) %>%
pivot_wider(names_from = variable,values_from = c(estimate))
groupQuarter <- read_csv("data/DECENNIALPL2020.P5/DECENNIALPL2020.P5_data_with_overlays_2022-06-23T135404.csv")
# Basic Table Analysis -------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' manipulate all three tables used to determine EFAs. For each table, calculate the percentage
#' for each block group. Additionally, calculate whether or not each block meets the default
#' threshold set a few years ago
MinorityTable2020 <- minority_percent(minority20)
PovertyTable2020 <- poverty_percent(income20)
VehicleTable2020 <- vehicle_percent(vehicles20)
View(VehicleTable2020)
# Extra data to display on the final map
GroupQuarter2020 <- groupQuarter [-1,] %>%
rename("IP" = P5_002N, "IP_Correctional" = P5_003N,"IP_Juvenile" = P5_004N, "IP_Nursing" = P5_005N, "IP_Other" = P5_006N,
"NIP" = P5_007N, "NIP_College"=P5_008N,"NIP_Military"=P5_009N,"NIP_Other"=P5_010N) %>%
mutate(IP = as.numeric(IP),IP_Correctional=as.numeric(IP_Correctional),IP_Juvenile=as.numeric(IP_Juvenile),IP_Nursing=as.numeric(IP_Nursing),IP_Other=as.numeric(IP_Other),
NIP = as.numeric(NIP),NIP_College=as.numeric(NIP_College),NIP_Military=as.numeric(NIP_Military),NIP_Other=as.numeric(NIP_Other),
GEOID = substring(GEO_ID,10)) %>% select(-GEO_ID)
#' join together all four tables
efa2020 <- initial_join20(MinorityTable2020,VehicleTable2020,PovertyTable2020,GroupQuarter2020)
View(efa2020)
# Join Tables and Region Geography -------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' join together the joint table with the block group shapefile to assign a geometry
#' to each of the block group locations. Additionally, filter out all block groups that
#' are not within the WFRC/MAG model region. Also, determine whether or not each
#' region's percentage is within the calculated thresehold (whether or not it is
#' at least one standard devation from the region's mean)
efa2020shpb4 <- geometry_calculate(efa2020,wfrc_blockgroups)
# select the columns needed for further analysis
efa2020shp <- efa2020shpb4 %>%
select(OBJECTID,SHAPE,Geography,Population,Poverty,PercPovert,SD_Pov,Perc_Pov25,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,ZeroCar,PercZeroCa,SD_ZeroCar,Perc_ZeroCar,HighestStDev,HighestPerc25wCar,HighestPerc20wCar,HighestPerc25woCar,HighestPerc20woCar,IP,IP_Correctional,IP_Juvenile,IP_Nursing,IP_Other,NIP,NIP_College,NIP_Military,NIP_Other)
#Create EFA GeoPackage for Original Analysis -------------------------------------------------------------------------------------------------------------------------------------------------------------#
efaPerc2020shp <- efa2020shp %>% filter(HighestPerc25wCar > 0) %>%
delete_low_pop_dens()
efaSD2020shp <- efa2020shp %>% filter(HighestStDev > 0) %>%
delete_low_pop_dens()
# select the columns needed for further analysis
efa2020shp <- efa2020shpb4 %>%
select(OBJECTID,SHAPE,Geography,Population,Poverty,PercPovert,SD_Pov,Perc_Pov25,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,ZeroCar,PercZeroCa,SD_ZeroCar,Perc_ZeroCar,HighestStDev,HighestPerc25wCar,HighestPerc20wCar,HighestPerc25woCar,HighestPerc20woCar,IP,IP_Correctional,IP_Juvenile,IP_Nursing,IP_Other,NIP,NIP_College,NIP_Military,NIP_Other)
#Create EFA GeoPackage for Original Analysis -------------------------------------------------------------------------------------------------------------------------------------------------------------#
efaPerc2020shp <- efa2020shp %>% filter(HighestPerc25wCar > 0) %>%
delete_low_pop_dens()
efaSD2020shp <- efa2020shp %>% filter(HighestStDev > 0) %>%
delete_low_pop_dens()
#Create EFA GeoPackage for Secondary Analysis-------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' create more spatial options where we adjust slightly the percentage calculation by using a poverty threshold of 20% instead of 25%
efaPerc2020Pov25NoCarshp <- efa2020shp %>% filter(HighestPerc25woCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-25% Min-40%",color = "blue")
efaPerc2020Pov20NoCarshp<- efa2020shp %>% filter(HighestPerc20woCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-20% Min-40%",color = "red")
efaPerc2020Pov20Carshp <- efa2020shp %>% filter(HighestPerc20wCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-20% Min 40% Veh-10%",color = "yellow")
efaPerc2017shp <- efashp2017 %>%  mutate(Perc_Pov25 = ifelse(PercPovert > 0.25,1,0), Perc_Pov20 = ifelse(PercPovert > 0.2,1,0)) %>%
mutate(SD_Pov = as.numeric(SD_Pov),SD_Minorit = as.numeric(SD_Minorit),SD_ZeroCar = as.numeric(SD_ZeroCar),HighestStD = as.numeric(HighestStD)) %>%
mutate(HighestPerc25woCar = pmax(Perc_Pov25,SD_Minorit), HighestPerc20woCar = pmax(Perc_Pov20,SD_Minorit),SHAPE = geometry)
efaPerc2017Pov25NoCarshp <- efaPerc2017shp %>% filter(HighestPerc25woCar > 0) %>% mutate(group = "2017 Pov-25% Min-40%",color = "green")
efaPerc2017Pov20NoCarshp<- efaPerc2017shp %>% filter(HighestPerc20woCar > 0) %>% mutate(group = "2017 Pov-20% Min-40%",color = "purple")
efaPerc2017Pov25Carshp <- efaPerc2017shp %>% filter(HighestStD > 0) %>% mutate(group = "2017 Pov-25% Min-40% Veh-10%", color = "gray")
efaAnalysis <- bind_rows(list(efaPerc2020Pov25NoCarshp,efaPerc2020Pov20NoCarshp,efaPerc2020Pov20Carshp,efaPerc2017Pov25NoCarshp,efaPerc2017Pov20NoCarshp,efaPerc2017Pov25Carshp)) %>%
mutate(group = as.factor(group))
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,Poverty,PercPovert,SD_Pov,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = PercMinori) %>%
mutate(HighestStDev = pmax(SD_Pov,SD_Minorit))
View(efa2020FinalZones)
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,TotalHH,Poverty,PercPovert,SD_Pov,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = PercMinori) %>%
mutate(HighestStDev = pmax(SD_Pov,SD_Minorit))
# select the columns needed for further analysis
efa2020shp <- efa2020shpb4 %>%
select(OBJECTID,SHAPE,Geography,Population,TotalHH,Poverty,PercPovert,SD_Pov,Perc_Pov25,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,ZeroCar,PercZeroCa,SD_ZeroCar,Perc_ZeroCar,HighestStDev,HighestPerc25wCar,HighestPerc20wCar,HighestPerc25woCar,HighestPerc20woCar,IP,IP_Correctional,IP_Juvenile,IP_Nursing,IP_Other,NIP,NIP_College,NIP_Military,NIP_Other)
#Create EFA GeoPackage for Original Analysis -------------------------------------------------------------------------------------------------------------------------------------------------------------#
efaPerc2020shp <- efa2020shp %>% filter(HighestPerc25wCar > 0) %>%
delete_low_pop_dens()
efaSD2020shp <- efa2020shp %>% filter(HighestStDev > 0) %>%
delete_low_pop_dens()
#Create EFA GeoPackage for Secondary Analysis-------------------------------------------------------------------------------------------------------------------------------------------------------------#
#' create more spatial options where we adjust slightly the percentage calculation by using a poverty threshold of 20% instead of 25%
efaPerc2020Pov25NoCarshp <- efa2020shp %>% filter(HighestPerc25woCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-25% Min-40%",color = "blue")
efaPerc2020Pov20NoCarshp<- efa2020shp %>% filter(HighestPerc20woCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-20% Min-40%",color = "red")
efaPerc2020Pov20Carshp <- efa2020shp %>% filter(HighestPerc20wCar > 0) %>%
delete_low_pop_dens() %>% mutate(group = "2020 Pov-20% Min 40% Veh-10%",color = "yellow")
efaPerc2017shp <- efashp2017 %>%  mutate(Perc_Pov25 = ifelse(PercPovert > 0.25,1,0), Perc_Pov20 = ifelse(PercPovert > 0.2,1,0)) %>%
mutate(SD_Pov = as.numeric(SD_Pov),SD_Minorit = as.numeric(SD_Minorit),SD_ZeroCar = as.numeric(SD_ZeroCar),HighestStD = as.numeric(HighestStD)) %>%
mutate(HighestPerc25woCar = pmax(Perc_Pov25,SD_Minorit), HighestPerc20woCar = pmax(Perc_Pov20,SD_Minorit),SHAPE = geometry)
efaPerc2017Pov25NoCarshp <- efaPerc2017shp %>% filter(HighestPerc25woCar > 0) %>% mutate(group = "2017 Pov-25% Min-40%",color = "green")
efaPerc2017Pov20NoCarshp<- efaPerc2017shp %>% filter(HighestPerc20woCar > 0) %>% mutate(group = "2017 Pov-20% Min-40%",color = "purple")
efaPerc2017Pov25Carshp <- efaPerc2017shp %>% filter(HighestStD > 0) %>% mutate(group = "2017 Pov-25% Min-40% Veh-10%", color = "gray")
efaAnalysis <- bind_rows(list(efaPerc2020Pov25NoCarshp,efaPerc2020Pov20NoCarshp,efaPerc2020Pov20Carshp,efaPerc2017Pov25NoCarshp,efaPerc2017Pov20NoCarshp,efaPerc2017Pov25Carshp)) %>%
mutate(group = as.factor(group))
# FINAL SELECTED EFA Zones for 2020
efa2020FinalZones <- efaPerc2020Pov20NoCarshp %>%
select(Geography,Population,TotalHH,Poverty,PercPovert,SD_Pov,Perc_Pov20,Minority,PercMinori,SD_Minorit,Perc_Minorit,HighestPerc20woCar,Area_Meters,Area_Miles,PopDens,SHAPE) %>%
rename("Perc_Minority40" = Perc_Minorit, "HighestPerc" = HighestPerc20woCar, "PercPoverty" = PercPovert, "Perc_Poverty20" = Perc_Pov20, "PercMinority" = PercMinori) %>%
mutate(HighestStDev = pmax(SD_Pov,SD_Minorit))
View(efa2020FinalZones)
st_write(efa2020FinalZones, dsn = "outputs/results/EquityFocusAreas2020v4.gpkg", layer = "EFA2020Pov20Min40NoCar",append=TRUE)
